---
- name: Create docker container
  hosts: local-container
  become: false
  gather_facts: false
  vars:
    docker_image_name: "debian-bare-ansible"
    docker_image_tag: "latest"
    docker_container_name: "test-container-1"
    docker_build_path: "{{ playbook_dir | dirname }}"
    local_ssh_port: 2022
    local_http_port: 8043
  tasks:
    - name: Install Python interface to Docker
      local_action:
        module: pip
        name:
          - docker
        state: present

    - name: Copy SSH public key
      local_action:
        module: copy
        src: "~/.ssh/id_rsa.pub"
        dest: "{{docker_build_path}}/allowedcontainerkey.pub"

    - name: Get info about existing image
      local_action:
        module: community.docker.docker_image_info
        name: '{{ docker_image_name }}:{{ docker_image_tag }}'
      register: prev_image

    - name: Build docker image from Dockerfile
      local_action:
        module: docker_image
        name: "{{docker_image_name}}"
        state: present
        source: build
        # docker_image by default only builds a new image if no images exists yet.
        # So it does not build a new one if you made any changes.
        # Force a rebuild to circumvent this.
        # (Alternative is to check timestamps and always set force_source based on that)
        force_source: true
        build:
          pull: true
          path: "{{docker_build_path}}"
      register: build_image
      # Compare the id of the image we already had with the id of the image we just build.
      changed_when: (prev_image.images[0].Id | default(0, true)) != build_image.image.Id

    - name: Start docker container
      local_action:
        module: docker_container
        name: "{{docker_container_name}}"
        image: "{{docker_image_name}}"
        state: started
        # If the containers fails to run, try setting privileges to true.
        # See README for details.
        # privileged: true
        volumes:
          # Work-around to allow privileged: false.
          # Make /sys/fs/cgroup writable for systemd.
          - /sys/fs/cgroup/dockerd.scope:/sys/fs/cgroup:rw
        ports:
          - "{{local_ssh_port}}:22"
          - "{{local_http_port}}:80"
        comparisons:
          '*': strict
      register: container_info
